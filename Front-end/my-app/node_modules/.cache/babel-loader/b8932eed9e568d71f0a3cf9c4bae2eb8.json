{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Users\\\\damia\\\\Documents\\\\Github repo\\\\SmartFarm\\\\Front-end\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\damia\\\\Documents\\\\Github repo\\\\SmartFarm\\\\Front-end\\\\my-app\\\\src\\\\components\\\\Feed.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n        display: block;\\n        margin: 0 auto;\\n        border-color: 4px solid #49184f;\\n        position: fixed;\\n        z-index: 999;\\n        height: 150px;\\n        width: 150px;\\n        overflow: visible;\\n        margin: auto;\\n        top: 0;\\n        left: 0;\\n        bottom: 0;\\n        right: 0;\\n        \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { Row, Card, Button, Container, Col } from 'react-bootstrap';\nimport axios from 'axios';\nimport '../planten.css';\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\"; //Home Pagina\n\nexport class Feed extends Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n\n    this.getPlants = async () => {\n      try {\n        return await axios.get('https://europe-west1-smartbroeikas.cloudfunctions.net/api/getplants', {\n          params: {},\n          headers: {\n            'Authorization': localStorage.getItem('jwt token')\n          }\n        });\n      } catch (err) {\n        if (err === 'Error: Request failed with status code 403') {\n          alert('Auth token has expired or is invalid!');\n          this.redirect();\n        }\n      }\n    };\n\n    this.redirect = () => {\n      localStorage.clear();\n      window.location.href = \"/login\";\n    };\n\n    this.logPlants = async () => {\n      const plants = this.getPlants().then(response => {\n        if (response.data) {\n          let listTest = [];\n          response.data.map(function (item) {\n            listTest.push(item);\n          });\n          this.setState({\n            plants: listTest\n          });\n\n          if (this._isMounted) {\n            this.setState({\n              loading: false\n            });\n          }\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    };\n\n    this.state = {\n      plants: [],\n      loading: true\n    };\n  }\n\n  componentWillMount() {\n    this.logPlants();\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    if (localStorage.getItem('jwt token') === null) {\n      this.redirect();\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const override = css(_templateObject());\n\n    if (this.state.loading) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(ClipLoader, {\n        css: override,\n        size: 150,\n        color: \"#49184f\",\n        loading: this.state.loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }));\n    } else {\n      const plants = this.state.plants.map((item, index) => {\n        return React.createElement(\"div\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(Col, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(Card, {\n          style: {\n            width: '18rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"card-img-top\",\n          style: {\n            backgroundImage: 'url(' + 'placeholder-plant.jpg' + ')'\n          },\n          alt: \"  \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }), React.createElement(Card.Body, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(Card.Title, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, item.body), React.createElement(Card.Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, item.plantId), React.createElement(Button, {\n          variant: \"primary btn-plant\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, \"Details\")))));\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, plants));\n    }\n  }\n\n}\nexport default Feed;","map":{"version":3,"sources":["C:/Users/damia/Documents/Github repo/SmartFarm/Front-end/my-app/src/components/Feed.js"],"names":["React","Component","Row","Card","Button","Container","Col","axios","css","ClipLoader","Feed","constructor","props","_isMounted","getPlants","get","params","headers","localStorage","getItem","err","alert","redirect","clear","window","location","href","logPlants","plants","then","response","data","listTest","map","item","push","setState","loading","catch","error","state","componentWillMount","componentDidMount","componentWillUnmount","render","override","index","width","backgroundImage","body","plantId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Row, Card, Button, Container, Col } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport '../planten.css';\r\nimport { css } from \"@emotion/core\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\n//Home Pagina\r\nexport class Feed extends Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            plants: [],\r\n            loading: true\r\n        }\r\n    }\r\n\r\n    getPlants = async () => {\r\n        try {\r\n          return await axios.get('https://europe-west1-smartbroeikas.cloudfunctions.net/api/getplants', \r\n                                { \r\n                                    params:{}, \r\n                                    headers: { 'Authorization': localStorage.getItem('jwt token') } \r\n                                })         \r\n        } catch (err) {\r\n            if(err === 'Error: Request failed with status code 403') {\r\n                alert('Auth token has expired or is invalid!');\r\n                this.redirect();\r\n           }\r\n        }\r\n    }\r\n\r\n    redirect = () => {\r\n        localStorage.clear();\r\n        window.location.href = \"/login\";\r\n    }\r\n\r\n    logPlants = async () => {\r\n        const plants = this.getPlants()\r\n          .then(response => {\r\n            if (response.data) {\r\n                let listTest = [];\r\n                response.data.map(function(item) {\r\n                    listTest.push(item);\r\n                })\r\n                this.setState({\r\n                    plants: listTest\r\n                })\r\n                if (this._isMounted) {\r\n                    this.setState({ loading: false })\r\n                }\r\n            }\r\n          })\r\n          .catch(error => {\r\n            alert(error);\r\n          })\r\n      }\r\n      \r\n      componentWillMount() {\r\n        this.logPlants()\r\n      }\r\n\r\n      componentDidMount() {\r\n        this._isMounted = true;\r\n        if( localStorage.getItem('jwt token') === null ){\r\n            this.redirect();\r\n        }\r\n      }\r\n\r\n      componentWillUnmount() {\r\n        this._isMounted = false;\r\n      }\r\n\r\n    render() {\r\n        const override = css`\r\n        display: block;\r\n        margin: 0 auto;\r\n        border-color: 4px solid #49184f;\r\n        position: fixed;\r\n        z-index: 999;\r\n        height: 150px;\r\n        width: 150px;\r\n        overflow: visible;\r\n        margin: auto;\r\n        top: 0;\r\n        left: 0;\r\n        bottom: 0;\r\n        right: 0;\r\n        `;\r\n        \r\n        if( this.state.loading ) {\r\n            return(\r\n                <div>\r\n                    <ClipLoader\r\n                        css={override}\r\n                        size={150}\r\n                        color={\"#49184f\"}\r\n                        loading={this.state.loading}\r\n                    />\r\n                </div>  \r\n            )\r\n        }\r\n        else {\r\n            const plants = this.state.plants.map((item, index) => {\r\n                return (\r\n                    <div key={index}>\r\n                        <Col>\r\n                            <Card style={{ width: '18rem' }}>\r\n                                <img className=\"card-img-top\" style={{ backgroundImage: 'url(' + 'placeholder-plant.jpg' + ')' }} alt=\"  \" />\r\n                                <Card.Body>\r\n                                    <Card.Title>{item.body}</Card.Title>\r\n                                    <Card.Text>\r\n                                    {item.plantId}\r\n                                    </Card.Text>\r\n                                    <Button variant=\"primary btn-plant\">Details</Button>\r\n                                </Card.Body>\r\n                            </Card> \r\n                        </Col>\r\n                    </div>\r\n                )\r\n            })\r\n    \r\n            return ( \r\n                <div>\r\n                    <Row>\r\n                        {plants}\r\n                    </Row>\r\n                </div>\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default Feed\r\n"]},"metadata":{},"sourceType":"module"}